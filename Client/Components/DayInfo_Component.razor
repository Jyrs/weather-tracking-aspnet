@using System.Text.Json
@using System.Text.Json.Serialization
@using WeatherApp.AppCore.Models;
@using WeatherApp.Client.Components;

@inject HttpClient Http


@if (weathers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <div class="filters-form">
            <div>
                <label>Select date</label>
                <input type="date">
            </div>
            <div>
                <label>Select region</label>
                <select name="Region">
                    <option value="computer_engineering">Russia</option>
                    <option value="slectrical_engineering">Argentina</option>
                    <option value="mechanical_engineering">UK</option>
                    <option value="civil_engineering">Ukrain</option>
                </select>
            </div>
            <div>
                <button class="enabled-input-form" @onclick=Toggle>+</button>
            </div>
        </div>
        @if (!Collapsed)
        {
            <WeatherInput_Component />
        }

        <Grid @ref="grid"
          TItem="Weather"
          Class="table table-hover table-bordered table-striped"
          DataProvider="WeatherDataProvider"
          AllowFiltering="true"
          Responsive="true">

            <GridColumn TItem="Weather" HeaderText="Date" PropertyName="Date">
                @context.Date
            </GridColumn>
            <GridColumn TItem="Weather" HeaderText="TemperatureC" PropertyName="TemperatureC">
                @context.TemperatureC
            </GridColumn>
            <GridColumn TItem="Weather" HeaderText="TemperatureF" PropertyName="TemperatureF">
                @context.TemperatureF
            </GridColumn>
            <GridColumn TItem="Weather" HeaderText="Summary" PropertyName="Summary">
                @context.Summary
            </GridColumn>
        </Grid>

    </div>
}

@code {
    // private WeatherForecast[]? forecasts;

    BlazorBootstrap.Grid<Weather> grid = default!;
    private IEnumerable<Weather> weathers = default!;

    [Parameter]
    public bool Collapsed { get; set; } = true;


    void Toggle()
    {
        Collapsed = !Collapsed;
    }

    private async Task<GridDataProviderResult<Weather>> WeatherDataProvider(GridDataProviderRequest<Weather> request)
    {
        return await Task.FromResult(request.ApplyTo(weathers));
    }

    public async Task<IEnumerable<Weather>> GetWeathersFromJSONAsync()
    {
        var options = new JsonSerializerOptions()
            {
                ReferenceHandler = ReferenceHandler.Preserve,
                PropertyNameCaseInsensitive = true
            };
       return await Http.GetFromJsonAsync<IEnumerable<Weather>>("WeatherForecast", options);
    }

    protected override async Task OnInitializedAsync()
    {
        weathers = await GetWeathersFromJSONAsync();
    }

}